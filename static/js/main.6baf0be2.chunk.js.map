{"version":3,"sources":["components/Task/Task.module.css","components/Todolist/Todolist.module.css","reportWebVitals.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addNewTaskTitle","trim","addItem","TextField","onChange","event","currentTarget","value","onKeyPress","charCode","variant","label","helperText","color","Button","onClick","style","backgroundColor","EditableSpan","editeMode","setEditeMode","title","setTitle","onBlur","onChangeTitle","autoFocus","onDoubleClick","Task","onRemoveHandler","useCallback","removeTask","task","id","todolistId","onChangeStatusHandler","changeTaskStatus","checked","onChangeTitleHandler","newTitle","changeTaskTitle","className","isDone","styles","is_done","Checkbox","IconButton","Delete","Todolist","changeTodolistTitleHandler","changeTodolistTitle","addTaskHandler","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","item","todolist","removeTodolist","map","margin","border","initialState","v1","AppWithRedux","dispatch","useDispatch","todolists","useSelector","store","type","removeTodolistAC","addTodolist","action","addTodolistAC","taskId","removeTaskAC","taskTitle","addTaskAC","changeTaskStatuskAC","changeTaskTitleAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","Paper","rootReducer","combineReducers","state","find","filteredTask","newTask","todolistTasks","createStore","window","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.6baf0be2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__Wq15u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__Cnasy\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Button, TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport styles from './AddItemForm.module.css'\n\nexport type AddItemFormPropsType = {\n    addItem: (newTaskTitle: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType )=> {\n\n    let [newTaskTitle, setNewTaskTitle] = useState(\"\")\n    let [error, setError] = useState<null | string>(null)\n\n    const onNewTaskTitleChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setNewTaskTitle(event.currentTarget.value);\n    }\n\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.charCode === 13) {\n            addNewTaskTitle();\n        }\n    }\n\n    const addNewTaskTitle = () => {\n        if (newTaskTitle.trim() !== \"\") {\n            props.addItem(newTaskTitle);\n            setNewTaskTitle(\"\");\n        }\n        else {\n            setError(\"Field is required!\");\n            setNewTaskTitle(\"\");\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                <TextField\n                    onChange={onNewTaskTitleChangeHandler}\n                    onKeyPress={onKeyPressHandler}\n                    variant={\"standard\"}\n                    label={\"Title\"}\n                    value={newTaskTitle}\n                    helperText={error}\n                    // className={error ? styles.error : \"\"}\n                    error={!!error}                                   //         ????????????????\n                    color={\"primary\"}\n                />\n                <Button\n                    onClick={addNewTaskTitle}\n                    variant={\"contained\"}\n                    style={{ backgroundColor: \"#61dafb\" }}\n                // className={styles.button_color}    //                Подключить стиль в AddItemForm.module.css\n                >+</Button>\n            </div>\n            {/* {error && <div className={styles.error_message}>{error}</div>} */}\n        </div>)\n})","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChangeEvent, KeyboardEvent, useState } from \"react\"\n\nexport type EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newTitle: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\n    let [editeMode, setEditeMode] = useState(false)\n    let [title, setTitle] = useState(\"\")\n\n    const activeteEditMode = () => {\n        setEditeMode(true);\n        setTitle(props.title);\n    };\n\n    const activeteViewMode = () => {\n        setEditeMode(false);\n        props.onChangeTitle(title);\n    };\n\n    const onTitleChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value);\n    };\n\n    return (\n        editeMode\n            ? <TextField\n                value={title}\n                onChange={onTitleChangeHandler}\n                onBlur={activeteViewMode}\n                autoFocus>\n            </TextField>\n            : <span onDoubleClick={activeteEditMode}>{props.title}</span>\n    )\n})","import React, { ChangeEvent, useCallback } from \"react\"\nimport {TaskType } from '../../App'\nimport { Checkbox, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\"\nimport styles from './Task.module.css'\n\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    removeTask: (id: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onRemoveHandler = useCallback(() => { props.removeTask(props.task.id, props.todolistId) }, [props.removeTask, props.task.id, props.todolistId])\n    const onChangeStatusHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        props.changeTaskStatus(props.task.id, event.currentTarget.checked, props.todolistId)\n    }, [props.changeTaskStatus, props.task.id, props.todolistId])\n\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\n        props.changeTaskTitle(props.task.id, newTitle, props.todolistId)\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\n\n    return <div key={props.task.id} className={props.task.isDone ? styles.is_done : \"\"}>\n        <Checkbox\n            checked={props.task.isDone}\n            onChange={onChangeStatusHandler}\n            style={{ color: \"#61dafb\" }}\n        />\n        <EditableSpan\n            onChangeTitle={onChangeTitleHandler}\n            title={props.task.title}\n        />\n        <IconButton >\n            <Delete\n                onClick={onRemoveHandler}\n            />\n        </IconButton>\n    </div>\n})","import { Button } from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton'\nimport { Delete } from '@material-ui/icons'\nimport React from 'react'\nimport { useCallback, useMemo } from 'react'\nimport { FilterValueType, TaskType } from '../../App'\nimport { AddItemForm } from '../AddItemForm/AddItemForm'\nimport { EditableSpan } from '../EditableSpan/EditableSpan'\nimport { Task } from '../Task/Task'\nimport styles from './Todolist.module.css'\n\nexport type TodolistPropsType = {\n    title: string\n    tasks: Array<TaskType>\n    id: string\n    filter: FilterValueType\n    removeTask: (id: string, todolistId: string) => void\n    addTask: (newTaskTitle: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\n    removeTodolist: (todolistId: string) => void\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\n    changeFilter: (value: FilterValueType, todolistId: string) => void\n}\n\nexport const Todolist = React.memo((props: TodolistPropsType) => {\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    }\n    const changeTodolistTitleHandler = useCallback((newTitle: string) => {\n        props.changeTodolistTitle(props.id, newTitle)\n    }, [props.changeTodolistTitle, props.id])\n    const addTaskHandler = useCallback((title: string) => { props.addTask(title, props.id) }, [props.addTask, props.id])\n\n    const onAllClickHandler = useCallback(() => { props.changeFilter(\"all\", props.id) }, [props.changeFilter, props.id])\n    const onActiveClickHandler = useCallback(() => { props.changeFilter(\"active\", props.id) }, [props.changeFilter, props.id])\n    const onCompletedClickHandler = useCallback(() => { props.changeFilter(\"completed\", props.id) }, [props.changeFilter, props.id])\n\n    let tasksForTodolist = props.tasks;\n    if (props.filter === \"active\") {\n        tasksForTodolist = tasksForTodolist.filter(item => item.isDone === false);\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodolist = tasksForTodolist.filter(item => item.isDone === true);\n    }\n\n\n    return (<div className={styles.todolist}>\n        <div>\n            <h2>\n                <EditableSpan\n                    onChangeTitle={changeTodolistTitleHandler}\n                    title={props.title}\n                />\n                <IconButton >\n                    <Delete\n                        onClick={removeTodolist}\n                    />\n                </IconButton>\n            </h2>\n\n            <AddItemForm addItem={addTaskHandler} />\n\n            <div>\n                {\n                    tasksForTodolist.map((item) => {\n\n                        return <Task\n                            key={item.id}\n                            task={item}\n                            todolistId={props.id}\n                            removeTask={props.removeTask}\n                            changeTaskStatus={props.changeTaskStatus}\n                            changeTaskTitle={props.changeTaskTitle}\n                        />\n                    })\n                }\n            </div>\n            <div>\n                <Button\n                    onClick={onAllClickHandler}\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    // className={props.filter === \"all\" ? styles.active_filter : \"\"}\n                    style={props.filter === \"all\"\n                        ? { backgroundColor: \"#61dafb\", color: \"\", margin: \"3px\" }\n                        : { backgroundColor: \"\", color: \"#61dafb\", border: \" 1px solid #61dafb\", margin: \"3px\" }}\n                > All</Button>\n                <Button\n                    onClick={onActiveClickHandler}\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    // className={props.filter === \"active\" ? styles.active_filter : \"\"}\n                    style={props.filter === \"active\"\n                        ? { backgroundColor: \"#61dafb\", color: \"\", margin: \"3px\" }\n                        : { backgroundColor: \"\", color: \"#61dafb\", border: \" 1px solid #61dafb\", margin: \"3px\" }}\n                >Active</Button>\n                <Button\n                    onClick={onCompletedClickHandler}\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    // className={props.filter === \"completed\" ? styles.active_filter : \"\"}\n                    style={props.filter === \"completed\"\n                        ? { backgroundColor: \"#61dafb\", color: \"\", margin: \"3px\" }\n                        : { backgroundColor: \"\", color: \"#61dafb\", border: \" 1px solid #61dafb\", margin: \"3px\" }}\n                >Completed</Button>\n            </div>\n        </div>\n    </div>)\n})\n\n\n\n\n\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    removeTask: (id: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\n}\n\n// export const Task = React.memo((props: TaskPropsType) => {\n//     const onRemoveHandler = useCallback(() => { props.removeTask(props.task.id, props.todolistId) }, [props.removeTask, props.task.id, props.todolistId])\n//     const onChangeStatusHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n//         props.changeTaskStatus(props.task.id, event.currentTarget.checked, props.todolistId)\n//     }, [props.changeTaskStatus, props.task.id, props.todolistId])\n\n//     const onChangeTitleHandler = useCallback((newTitle: string) => {\n//         props.changeTaskTitle(props.task.id, newTitle, props.todolistId)\n//     }, [props.changeTaskTitle, props.task.id, props.todolistId])\n\n//     return <div key={props.task.id} className={props.task.isDone ? styles.is_done : \"\"}>\n//         <Checkbox\n//             checked={props.task.isDone}\n//             onChange={onChangeStatusHandler}\n//             style={{ color: \"#61dafb\" }}\n//         />\n//         <EditableSpan\n//             onChangeTitle={onChangeTitleHandler}\n//             title={props.task.title}\n//         />\n//         <IconButton >\n//             <Delete\n//                 onClick={onRemoveHandler}\n//             />\n//         </IconButton>\n//     </div>\n// })","import { v1 } from \"uuid\";\nimport { FilterValueType, TodolistType } from \"../App\";\n\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistActionType\n    | ChangeTodolistFilterActionType\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    id: string\n    title: string\n}\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    id: string\n    filter: FilterValueType\n}\n\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistType> = [\n    // { id: todolistId1, title: \"What to learn\", filter: \"all\" },\n    // { id: todolistId2, title: \"What to buy\", filter: \"all\" },\n]\n\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\n    switch (action.type) {\n\n        case 'REMOVE-TODOLIST': {\n            return state.filter(item => item.id !== action.id);\n        }\n\n        case 'ADD-TODOLIST': {\n            return [{\n                id: action.todolistId,\n                title: action.title,\n                filter: \"all\"\n            }, ...state];\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            let todolist = state.find(item => item.id == action.id);\n            if (todolist)\n                todolist.title = action.title;\n            return [...state];\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            let todolist = state.find(item => item.id === action.id)\n            if (todolist) {\n                todolist.filter = action.filter;\n            }\n            return [...state];\n        }\n        default:\n            return state;\n    }\n\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return { type: 'REMOVE-TODOLIST', id: todolistId }\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1() }\n}\nexport const changeTodolistAC = (id: string, title: string): ChangeTodolistActionType => {\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title }\n}\nexport const changeTodolistFilterAC = (id: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter }\n}\n","import { v1 } from \"uuid\";\nimport { TasksStateType } from \"../App\";\nimport { AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2 } from \"./todolists-reducer\";\n\n\ntype ActionsType =\n    | RemoveTaskActionType\n    | AddTaskActionType\n    | ChangeTaskStatusType\n    | ChangeTaskTitleType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    taskId: string\n    todolistId: string\n}\nexport type AddTaskActionType = {\n    type: 'ADD-TASK'\n    taskTitle: string\n    todolistId: string\n}\nexport type ChangeTaskStatusType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    isDone: boolean\n    todolistId: string\n}\nexport type ChangeTaskTitleType = {\n    type: 'CHANGE-TASK-TITLE'\n    taskId: string\n    newTitle: string\n    todolistId: string\n}\n\nconst initialState: TasksStateType = {\n    // [todolistId1]:\n    //     [{ id: v1(), title: \"HTML\", isDone: true },\n    //     { id: v1(), title: \"CSS\", isDone: true },\n    //     { id: v1(), title: \"JS\", isDone: false },\n    //     { id: v1(), title: \"React\", isDone: false },\n    //     { id: v1(), title: \"Vue\", isDone: false },],\n    // [todolistId2]:\n    //     [{ id: v1(), title: \"Milk\", isDone: true },\n    //     { id: v1(), title: \"Cola\", isDone: true },\n    //     { id: v1(), title: \"Limon\", isDone: false },\n    //     { id: v1(), title: \"Beer\", isDone: false },],\n}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n\n        case 'REMOVE-TASK': {\n            let tasks = state[action.todolistId];\n            let filteredTask = tasks.filter(item => item.id !== action.taskId);\n            state[action.todolistId] = filteredTask;\n            return { ...state };\n        }\n\n        case 'ADD-TASK': {\n            let newTask = { id: v1(), title: action.taskTitle, isDone: false };\n            state[action.todolistId] = [newTask, ...state[action.todolistId]];\n            return { ...state };\n        }\n\n        case 'CHANGE-TASK-STATUS': {\n            let todolistTasks = state[action.todolistId];\n            state[action.todolistId] = todolistTasks.map(item => item.id === action.taskId\n                ? { ...item, isDone: action.isDone }\n                : item)\n            return { ...state };\n        }\n\n        case 'CHANGE-TASK-TITLE': {\n            let todolistTasks = state[action.todolistId];\n            state[action.todolistId] = todolistTasks.map(item => item.id === action.taskId\n                ? { ...item, title: action.newTitle }\n                : item)\n            return { ...state };\n        }\n\n        case 'ADD-TODOLIST': {\n            state[action.todolistId] = [];\n            return { ...state };\n        }\n\n        case 'REMOVE-TODOLIST': {\n            delete state[action.id];\n            return { ...state };\n        }\n\n        default:\n            return state;\n    }\n\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return { type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId }\n}\nexport const addTaskAC = (taskTitle: string, todolistId: string): AddTaskActionType => {\n    return { type: 'ADD-TASK', taskTitle: taskTitle, todolistId: todolistId }\n}\nexport const changeTaskStatuskAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusType => {\n    return { type: 'CHANGE-TASK-STATUS', taskId: taskId, isDone: isDone, todolistId: todolistId }\n}\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todolistId: string): ChangeTaskTitleType => {\n    return { type: 'CHANGE-TASK-TITLE', taskId: taskId, newTitle: newTitle, todolistId: todolistId }\n}\n","import { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport './App.css';\nimport { AddItemForm } from './components/AddItemForm/AddItemForm';\nimport { Todolist } from './components/Todolist/Todolist';\nimport { Menu } from '@material-ui/icons';\nimport { addTodolistAC, changeTodolistAC, changeTodolistFilterAC, removeTodolistAC, todolistId1, todolistId2, todolistsReducer } from './state/todolists-reducer';\nimport { addTaskAC, changeTaskStatuskAC, changeTaskTitleAC, removeTaskAC } from './state/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStateType } from './state/store';\nimport { useCallback } from 'react';\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterValueType\n}\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\n\nexport function AppWithRedux() {\n\n    const dispatch = useDispatch();\n    const todolists = useSelector<RootStateType, Array<TodolistType>>(store => store.todolists);\n    const tasks = useSelector<RootStateType, TasksStateType>(store => store.tasks);\n\n\n    const removeTodolist = useCallback((todolistId: string) => {\n        dispatch(removeTodolistAC(todolistId));\n    }, [dispatch]);\n\n    const addTodolist = useCallback((title: string) => {\n        let action = addTodolistAC(title)\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\n        dispatch(changeTodolistAC(todolistId, newTitle));\n    }, [dispatch]);\n\n    const changeFilter = useCallback((value: FilterValueType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC(todolistId, value));\n    }, [dispatch]);\n\n    const removeTask = useCallback((id: string, todolistId: string) => {\n        dispatch(removeTaskAC(id, todolistId))\n    }, [dispatch]);\n\n    const addTask = useCallback((newTaskTitle: string, todolistId: string) => {\n        dispatch(addTaskAC(newTaskTitle, todolistId))\n    }, [dispatch]);\n\n    const changeTaskStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\n        dispatch(changeTaskStatuskAC(id, isDone, todolistId))\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\n    }, [dispatch]);\n\n\n    return (\n        <div className=\"App\">\n\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        // size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                    // sx={{ mr: 2 }}\n                    >\n                        <Menu />\n                    </IconButton>\n                    <Typography\n                        variant=\"h6\"\n                    // component=\"div\"\n                    // sx={{ flexGrow: 1 }}\n                    >\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{ padding: \"20px\" }}>\n                    <AddItemForm addItem={addTodolist} />\n                </Grid>\n                <Grid container spacing={10}>\n                    {\n                        todolists.map((item) => {\n                            let tasksForTodolist = tasks[item.id];\n                            // if (item.filter === \"active\") {\n                            //     tasksForTodolist = tasksForTodolist.filter(item => item.isDone === false)\n                            // }\n                            // if (item.filter === \"completed\") {\n                            //     tasksForTodolist = tasksForTodolist.filter(item => item.isDone === true)\n                            // }\n\n                            return (\n                                <Grid item>\n                                    <Paper style={{ padding: \"20px\", backgroundColor: \" #23272e\" }}>\n                                        <Todolist\n                                            key={item.id}\n                                            id={item.id}\n                                            title={item.title}\n                                            tasks={tasksForTodolist}\n                                            filter={item.filter}\n                                            changeFilter={changeFilter}\n                                            removeTask={removeTask}\n                                            addTask={addTask}\n                                            changeTaskStatus={changeTaskStatus}\n                                            changeTaskTitle={changeTaskTitle}\n                                            removeTodolist={removeTodolist}\n                                            changeTodolistTitle={changeTodolistTitle}\n                                        />\n                                    </Paper>\n                                </Grid>\n                            )\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n\n","import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { combineReducers, createStore } from \"redux\";\n\nexport type RootStateType = ReturnType<typeof rootReducer>\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n})\n\nexport const store = createStore(rootReducer);\n\n\n//@ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createTheme } from '@material-ui/core';\nimport AppWithReducers from './AppWithReducers';\nimport AppWithRedux from './AppWithRedux';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#61dafb \"\n    },\n    secondary: {\n      main: \"#ffffff\"\n    },\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme} >\n        <AppWithRedux />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}