{"version":3,"sources":["api/tasks-api.ts","state/app-reducer.ts","utils/error-utils.ts","state/tasks-reducer.ts","api/todolists-api.ts","state/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/features/TodolistsList/Todolist/Task/Task.tsx","components/features/TodolistsList/Todolist/Todolist.tsx","components/features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","api/login-api.ts","state/login-reducer.ts","components/features/Login/Login.tsx","app/App.tsx","state/store.ts","index.tsx","components/features/TodolistsList/Todolist/Task/Task.module.css","components/features/TodolistsList/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","initialState","status","error","setAppErrorAC","type","setAppStatusAC","instans","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","taskId","delete","title","post","model","put","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","UIModel","getState","task","tasks","find","item","id","APIModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","todolistsAPI","newTitle","v1","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addNewTaskTitle","trim","TextField","onChange","event","currentTarget","value","onKeyPress","charCode","variant","label","helperText","color","Button","onClick","style","backgroundColor","EditableSpan","props","editeMode","setEditeMode","setTitle","onBlur","onChangeTitle","autoFocus","onDoubleClick","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","changeTaskTitle","className","styles","is_done","Checkbox","IconButton","Delete","Todolist","useDispatch","useEffect","todolist","setTasksAC","items","changeTodolistTitleHandler","changeTodolistTitle","addTaskHandler","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","entytiStatus","removeTodolist","map","margin","border","TodolistsList","todolists","useSelector","store","removeTodolistAC","removeTodolistTC","addTodolist","addTodolistTC","changeTodolistAC","changeTodolistTitleTC","removeTaskAC","removeTasksTC","addTaskTC","Grid","container","padding","spacing","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","state","app","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","loginAPI","payload","email","password","rememberMe","captcha","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","handleBlur","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","action","todoListId","forEach","login","createStore","applyMiddleware","thunk","window","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9b156123.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"d215560e-a06c-4471-95ae-fec7d89d460b\"\n    }\n}\n\nconst instans = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    ...settings\n})\n\n\nexport const tasksAPI = {\n\n    getTasks(todolistId: string) {\n        return instans.get<GetTaskResponseType>(`todo-lists/${todolistId}/tasks`);\n    },\n\n    removeTask(todolistId: string, taskId: string) {\n        return instans.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n\n    addTask(todolistId: string, title: string) {\n        return instans.post<ResponseType<{ item: TaskAPIType }>>(`todo-lists/${todolistId}/tasks/`, { title: title });\n    },\n\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {                                                  //??????????????????\n        return instans.put<ResponseType<UpdateTaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    },\n\n}\n\n// types\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Нigh = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskAPIType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type GetTaskResponseType = {\n    totalCount: number\n    error: string | null\n    items: Array<TaskAPIType>\n}\ntype ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}","\nconst initialState = {\n    status: 'loading' as RequestStatusType,\n    error: null\n    // error: \"Error message 😠\"\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return { ...state, status: action.status }\n        case 'APP/SET-ERROR':\n            return { ...state, error: action.error }\n        default:\n            return state\n    }\n}\n\n//types\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n\n// type InitialStateType = typeof initialState\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n}\n\n\n// actions\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\n\n","import { Dispatch } from 'redux';\nimport { ResponseType } from '../api/todolists-api';\nimport { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../state/app-reducer';\n\n// generic function\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppErrorAC(error.message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from './app-reducer';\nimport { RootStateType } from './store';\nimport { action } from '@storybook/addon-actions';\nimport { v1 } from \"uuid\";\nimport { TaskAPIType, TaskPriorities, tasksAPI, TaskStatuses, UpdateTaskType } from \"../api/tasks-api\";\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType, todolistId1, todolistId2 } from \"./todolists-reducer\";\nimport { Dispatch } from 'redux';\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\n\n\nconst initialState: TasksStateType = {\n    // [todolistId1]:\n    //     [{ id: v1(), title: \"HTML\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"CSS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"JS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"Vue\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },],\n    // [todolistId2]:\n    //     [{ id: v1(), title: \"Milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"Cola\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"Limon\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },\n    //     { id: v1(), title: \"Beer\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: \"\", priority: TaskPriorities.Low, startDate: \"\", deadline: \"\", order: 0, addedDate: \"\" },],\n}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n\n        case 'REMOVE-TASK': {\n            // let tasks = state[action.todolistId];\n            // let filteredTask = tasks.filter(item => item.id !== action.taskId);\n            // state[action.todolistId] = filteredTask;\n            // return { ...state };\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(item => item.id !== action.taskId) }\n        }\n        case 'ADD-TASK': {\n            // let newTask = action.task\n            // state[action.task.todoListId] = [newTask, ...state[action.task.todoListId]];\n            // return { ...state };\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\n        }\n        case 'UPDATE-TASK': {\n            // let todolistTasks = state[action.todolistId];\n            // state[action.todolistId] = todolistTasks.map(item => item.id === action.taskId\n            //     ? { ...item, ...action.model }\n            //     : item)\n            // return { ...state };\n            return {\n                ...state, [action.todolistId]: state[action.todolistId].map(item => item.id === action.taskId\n                    ? { ...item, ...action.model }\n                    : item)\n            }\n        }\n        case 'ADD-TODOLIST':\n            // state[action.todolist.id] = [];      \n            // return { ...state };\n            return { ...state, [action.todolist.id]: [] }\n        case 'REMOVE-TODOLIST':\n            delete state[action.id];\n            return { ...state };\n\n        case 'SET-TODOLISTS': {\n            action.todolists.forEach(item => {\n                state[item.id] = []\n            })\n            return { ...state };\n        }\n        case 'SET-TASKS':\n            // state[action.todolistId] = action.tasks\n            // return { ...state };\n            return { ...state, [action.todolistId]: action.tasks }\n\n        default:\n            return state;\n    }\n\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\nexport const addTaskAC = (task: TaskAPIType) => ({ type: 'ADD-TASK', task } as const)\nexport const updateTaskAC = (taskId: string, model: ModelUpdateTaskType, todolistId: string) => ({ type: 'UPDATE-TASK', taskId, model, todolistId } as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({ type: 'SET-TASKS', tasks, todolistId } as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    tasksAPI.getTasks(todolistId)\n        .then((res) => {\n            dispatch(setTasksAC(res.data.items, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTasksTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    tasksAPI.removeTask(todolistId, taskId)\n        .then((res) => {\n            dispatch(removeTaskAC(taskId, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const addTaskTC = (newTaskTitle: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    tasksAPI.addTask(todolistId, newTaskTitle)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTaskAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            }\n            else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error: any) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (todolistId: string, UIModel: ModelUpdateTaskType, taskId: string) => (dispatch: Dispatch<ActionsType>, getState: () => RootStateType) => {\n    const state = getState().tasks;\n    const task = state[todolistId].find((item) => item.id === taskId)\n    if (!task) {\n        console.warn('Some error with change task!')\n        return\n    }\n    const APIModel: UpdateTaskType = {\n        title: task.title,\n        description: task.description,\n        priority: task.priority,\n        startDate: task.startDate,\n        deadline: task.deadline,\n        status: task.status,\n        ...UIModel\n    }\n    dispatch(setAppStatusAC('loading'))\n    tasksAPI.updateTask(todolistId, taskId, APIModel)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(updateTaskAC(taskId, UIModel, todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch);\n        })\n}\n\n// types\nexport type TaskType = TaskAPIType\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport type ModelUpdateTaskType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\ntype ActionsType =\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof setTasksAC>\n    | ReturnType<typeof updateTaskAC>\n","import axios from 'axios';\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"d215560e-a06c-4471-95ae-fec7d89d460b\"\n    }\n}\n\nconst instans = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    ...settings\n})\n\n\nexport const todolistsAPI = {\n\n    getTodolists() {\n        return instans.get<Array<TodolistAPIType>>(\"todo-lists/\");\n    },\n    addTodolist(title: string) {\n        return instans.post<ResponseType<{ item: TodolistAPIType }>>(\"todo-lists/\", { title: title });\n    },\n    removeTodolist(todolistId: string) {\n        return instans.delete<ResponseType>(`todo-lists/${todolistId}`);\n    },\n    changeTodolist(todolistId: string, newTitle: string) {\n        return instans.put<ResponseType>(`todo-lists/${todolistId}`, { title: newTitle })\n    },\n\n}\n\n// types\nexport type TodolistAPIType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}","import { action } from '@storybook/addon-actions';\nimport { todolistsAPI, TodolistAPIType } from './../api/todolists-api';\nimport { v1 } from \"uuid\";\nimport { Dispatch } from 'redux';\nimport { RequestStatusType, setAppStatusAC, SetAppStatusActionType } from './app-reducer';\n\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistType> = [\n    // { id: todolistId1, title: \"What to learn\", filter: \"all\", entytiStatus: 'idle', addedDate: \"\", order: 0, },\n    // { id: todolistId2, title: \"What to buy\", filter: \"all\", entytiStatus: 'idle', addedDate: \"\", order: 0, },\n]\n\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\n    switch (action.type) {\n\n        case 'REMOVE-TODOLIST':\n            return state.filter(item => item.id !== action.id);\n\n        case 'ADD-TODOLIST':\n            return [{ ...action.todolist }, ...state];\n\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(item => item.id == action.id ? { ...item, title: action.title } : item)\n        // let todolist = state.find(item => item.id == action.id);\n        // if (todolist)\n        //     todolist.title = action.title;\n        // return [...state];\n\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(item => item.id == action.id ? { ...item, filter: action.filter } : item)\n        // let todolist = state.find(item => item.id === action.id)\n        // if (todolist) {\n        //     todolist.filter = action.filter;\n        // }\n        // return [...state];\n\n        case 'CHANGE-TODOLIST-ENTYTI-STATUS':\n            return state.map(item => item.id == action.id ? { ...item, entytiStatus: action.status } : item)\n\n        case 'SET-TODOLISTS':\n            return action.todolists.map(item => ({ ...item, filter: \"all\", entytiStatus: 'idle' }))\n        // return action.todolists.map(item => {\n        //     return {\n        //         ...item,\n        //         filter: \"all\"\n        //     }\n        // })\n\n        default:\n            return state;\n    }\n\n}\n// actions\nexport const removeTodolistAC = (todolistId: string) => ({ type: 'REMOVE-TODOLIST', id: todolistId } as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\nexport const changeTodolistAC = (id: string, title: string) => ({ type: 'CHANGE-TODOLIST-TITLE', id, title } as const)\nexport const changeTodolistFilterAC = (id: string, filter: FilterValueType) => ({ type: 'CHANGE-TODOLIST-FILTER', id, filter } as const)\nexport const setTodolistsAC = (todolists: Array<TodolistAPIType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\nexport const changeTodolistEntytiStatusAC = (id: string, status: RequestStatusType) => ({ type: 'CHANGE-TODOLIST-ENTYTI-STATUS', id, status } as const)\n\n// thunks\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTodolists()\n        .then((res) => {\n            dispatch(setTodolistsAC(res.data))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch (changeTodolistEntytiStatusAC(todolistId, 'loading'))\n    todolistsAPI.removeTodolist(todolistId)\n        .then((res) => {\n            dispatch(removeTodolistAC(todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.addTodolist(title)\n        .then((res) => {\n            dispatch(addTodolistAC({ ...res.data.data.item, filter: 'all', entytiStatus: 'idle' }))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.changeTodolist(todolistId, title)\n        .then((res) => {\n            dispatch(changeTodolistAC(todolistId, title))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\n\n// types\nexport type TodolistType = TodolistAPIType & {\n    filter: FilterValueType\n    entytiStatus: RequestStatusType\n}\n\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\n\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\nexport type ChangeTodolistEntytiStatusActionType = ReturnType<typeof changeTodolistEntytiStatusAC>\n\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | SetTodolistsActionType\n    | SetAppStatusActionType\n    | ChangeTodolistEntytiStatusActionType\n    | ReturnType<typeof changeTodolistAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | ReturnType<typeof changeTodolistEntytiStatusAC>\n\n","import { Button, TextField } from '@mui/material';\nimport React from \"react\";\nimport { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport styles from './AddItemForm.module.css'\n\nexport type AddItemFormPropsType = {\n    addItem: (newTaskTitle: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(({addItem, disabled=false}: AddItemFormPropsType) => {\n\n    let [newTaskTitle, setNewTaskTitle] = useState(\"\")\n    let [error, setError] = useState<null | string>(null)\n\n    const onNewTaskTitleChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setNewTaskTitle(event.currentTarget.value);\n    }\n\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.charCode === 13) {\n            addNewTaskTitle();\n        }\n    }\n\n    const addNewTaskTitle = () => {\n        if (newTaskTitle.trim() !== \"\") {\n            addItem(newTaskTitle);\n            setNewTaskTitle(\"\");\n        }\n        else {\n            setError(\"Field is required!\");\n            setNewTaskTitle(\"\");\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                <TextField\n                    disabled={disabled}\n                    onChange={onNewTaskTitleChangeHandler}\n                    onKeyPress={onKeyPressHandler}\n                    variant={\"standard\"}\n                    label={\"Title\"}\n                    value={newTaskTitle}\n                    helperText={error}\n                    // className={error ? styles.error : \"\"}\n                    error={!!error}                                   //         ????????????????\n                    color={\"primary\"}\n                    //   sx={{ input: { color: \"#61dafb\" } }}     // поменять цвет шрифта???\n                    //   sx={{ input: { background: \"#61dafb\" } }}\n                />\n                <Button\n                    disabled={disabled}\n                    onClick={addNewTaskTitle}\n                    variant={\"contained\"}\n                    style={{ backgroundColor: \"#61dafb\" }}\n                // className={styles.button_color}    //                Подключить стиль в AddItemForm.module.css\n                >+</Button>\n            </div>\n            {/* {error && <div className={styles.error_message}>{error}</div>} */}\n        </div>)\n})","import { TextField } from '@mui/material';\nimport React from \"react\";\nimport { ChangeEvent, KeyboardEvent, useState } from \"react\"\n\nexport type EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newTitle: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\n    let [editeMode, setEditeMode] = useState(false)\n    let [title, setTitle] = useState(\"\")\n\n    const activeteEditMode = () => {\n        setEditeMode(true);\n        setTitle(props.title);\n    };\n\n    const activeteViewMode = () => {\n        setEditeMode(false);\n        props.onChangeTitle(title);\n    };\n\n    const onTitleChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value);\n    };\n\n    return (\n        editeMode\n            ? <TextField\n                value={title}\n                onChange={onTitleChangeHandler}\n                onBlur={activeteViewMode}\n                autoFocus>\n            </TextField>\n            : <span onDoubleClick={activeteEditMode}>{props.title}</span>\n    )\n})","import React, { ChangeEvent, useCallback } from \"react\"\nimport { Checkbox, IconButton } from '@mui/material'\nimport { Delete } from '@mui/icons-material'\nimport { EditableSpan } from \"../../../../EditableSpan/EditableSpan\"\nimport styles from './Task.module.css'\nimport { TaskStatuses } from \"../../../../../api/tasks-api\"\nimport { TaskType } from \"../../../../../state/tasks-reducer\"\n\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    removeTask: (id: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onRemoveHandler = useCallback(() => { props.removeTask(props.task.id, props.todolistId) }, [props.removeTask, props.task.id, props.todolistId])\n    const onChangeStatusHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        props.changeTaskStatus(props.task.id, event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props.changeTaskStatus, props.task.id, props.todolistId])\n\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\n        props.changeTaskTitle(props.task.id, newTitle, props.todolistId)\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? styles.is_done : \"\"}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            onChange={onChangeStatusHandler}\n            style={{ color: \"#61dafb\" }}\n        />\n        <EditableSpan\n            onChangeTitle={onChangeTitleHandler}\n            title={props.task.title}\n        />\n        <IconButton >\n            <Delete\n                onClick={onRemoveHandler}\n            />\n        </IconButton>\n    </div>\n})","import { Delete } from '@mui/icons-material'\nimport { Button } from '@mui/material'\nimport IconButton from '@mui/material/IconButton'\nimport React, { useEffect } from 'react'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { TaskStatuses } from '../../../../api/tasks-api'\nimport { fetchTasksTC, TaskType } from '../../../../state/tasks-reducer'\nimport { FilterValueType, TodolistType } from '../../../../state/todolists-reducer'\nimport { AddItemForm } from '../../../AddItemForm/AddItemForm'\nimport { EditableSpan } from '../../../EditableSpan/EditableSpan'\nimport { Task } from './Task/Task'\n// import styles from './Todolist.module.css'\nimport styles from './Todolist.module.css'\n\nexport type TodolistPropsType = {\n    // id: string\n    // filter: FilterValueType\n    // title: string\n    todolist: TodolistType\n    tasks: Array<TaskType>\n    removeTask: (id: string, todolistId: string) => void\n    addTask: (newTaskTitle: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\n    removeTodolist: (todolistId: string) => void\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\n    changeFilter: (value: FilterValueType, todolistId: string) => void\n}\n\nexport const Todolist = React.memo((props: TodolistPropsType) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n\n        // todolistsAPI.getTodolists()\n        //     .then(res => {\n        //         dispatch(setTodolistsAC(res.data))\n        //     })\n\n        // fetchTodolistsThunk(dispatch);\n\n        dispatch(fetchTasksTC(props.todolist.id));\n    }, []);\n\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n    const changeTodolistTitleHandler = useCallback((newTitle: string) => {\n        props.changeTodolistTitle(props.todolist.id, newTitle)\n    }, [props.changeTodolistTitle, props.todolist.id])\n    const addTaskHandler = useCallback((title: string) => { props.addTask(title, props.todolist.id) }, [props.addTask, props.todolist.id])\n\n    const onAllClickHandler = useCallback(() => { props.changeFilter(\"all\", props.todolist.id) }, [props.changeFilter, props.todolist.id])\n    const onActiveClickHandler = useCallback(() => { props.changeFilter(\"active\", props.todolist.id) }, [props.changeFilter, props.todolist.id])\n    const onCompletedClickHandler = useCallback(() => { props.changeFilter(\"completed\", props.todolist.id) }, [props.changeFilter, props.todolist.id])\n\n    let tasksForTodolist = props.tasks;\n    if (props.todolist.filter === \"active\") {\n        tasksForTodolist = tasksForTodolist.filter(item => item.status === TaskStatuses.New);\n    }\n    if (props.todolist.filter === \"completed\") {\n        tasksForTodolist = tasksForTodolist.filter(item => item.status === TaskStatuses.Completed);\n    }\n\n\n    return (<div className={styles.todolist}>\n        <div>\n            <h2>\n                <EditableSpan\n                    onChangeTitle={changeTodolistTitleHandler}\n                    title={props.todolist.title}\n                />\n\n                <IconButton\n                    disabled={props.todolist.entytiStatus === 'loading'}\n                    onClick={removeTodolist} >\n                    <Delete />\n                </IconButton>\n            </h2>\n\n            <AddItemForm\n                addItem={addTaskHandler}\n                disabled={props.todolist.entytiStatus === 'loading'}\n            />\n\n            <div>\n                {\n                    tasksForTodolist.map((item) => {\n\n                        return <Task\n                            key={item.id}\n                            task={item}\n                            todolistId={props.todolist.id}\n                            removeTask={props.removeTask}\n                            changeTaskStatus={props.changeTaskStatus}\n                            changeTaskTitle={props.changeTaskTitle}\n                        />\n                    })\n                }\n            </div>\n            <div>\n                <Button\n                    onClick={onAllClickHandler}\n                    variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    // className={props.filter === \"all\" ? styles.active_filter : \"\"}\n                    style={props.todolist.filter === \"all\"\n                        ? { backgroundColor: \"#61dafb\", color: \"\", margin: \"3px\" }\n                        : { backgroundColor: \"\", color: \"#61dafb\", border: \" 1px solid #61dafb\", margin: \"3px\" }}\n                > All</Button>\n                <Button\n                    onClick={onActiveClickHandler}\n                    variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    // className={props.filter === \"active\" ? styles.active_filter : \"\"}\n                    style={props.todolist.filter === \"active\"\n                        ? { backgroundColor: \"#61dafb\", color: \"\", margin: \"3px\" }\n                        : { backgroundColor: \"\", color: \"#61dafb\", border: \" 1px solid #61dafb\", margin: \"3px\" }}\n                >Active</Button>\n                <Button\n                    onClick={onCompletedClickHandler}\n                    variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    // className={props.filter === \"completed\" ? styles.active_filter : \"\"}\n                    style={props.todolist.filter === \"completed\"\n                        ? { backgroundColor: \"#61dafb\", color: \"\", margin: \"3px\" }\n                        : { backgroundColor: \"\", color: \"#61dafb\", border: \" 1px solid #61dafb\", margin: \"3px\" }}\n                >Completed</Button>\n            </div>\n        </div>\n    </div>)\n})\n","import { useCallback, useEffect } from \"react\";\nimport { Grid, Paper } from '@mui/material';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { TaskStatuses } from \"../../../api/tasks-api\";\nimport { RootStateType } from \"../../../state/store\";\nimport { addTaskTC, removeTasksTC, TasksStateType, updateTaskTC } from \"../../../state/tasks-reducer\";\nimport { addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC, fetchTodolistsTC, FilterValueType, removeTodolistTC, TodolistType } from \"../../../state/todolists-reducer\";\nimport { AddItemForm } from \"../../AddItemForm/AddItemForm\";\nimport { Todolist } from \"./Todolist/Todolist\";\n\n\nexport const TodolistsList: React.FC = () => {\n\n    const dispatch = useDispatch();\n    const todolists = useSelector<RootStateType, Array<TodolistType>>(store => store.todolists);\n    const tasks = useSelector<RootStateType, TasksStateType>(store => store.tasks);\n\n    useEffect(() => {\n        dispatch(fetchTodolistsTC());\n    }, [])\n\n    const removeTodolist = useCallback((todolistId: string) => {\n        dispatch(removeTodolistTC(todolistId));\n    }, [dispatch]);\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistTC(title));\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(todolistId, newTitle));\n    }, [dispatch]);\n\n    const changeFilter = useCallback((value: FilterValueType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC(todolistId, value));\n    }, [dispatch]);\n\n    const removeTask = useCallback((id: string, todolistId: string) => {\n        dispatch(removeTasksTC(todolistId, id));\n    }, [dispatch]);\n\n    const addTask = useCallback((newTaskTitle: string, todolistId: string) => {\n        dispatch(addTaskTC(newTaskTitle, todolistId))\n    }, [dispatch]);\n\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n        dispatch(updateTaskTC(todolistId, { status: status }, id))\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\n        dispatch(updateTaskTC(todolistId, { title: newTitle }, id))\n    }, [dispatch]);\n\n\n\n    return (\n        <>\n            <Grid container style={{ padding: \"20px\" }}>\n                <AddItemForm addItem={addTodolist} />\n            </Grid>\n            <Grid container spacing={10}>\n                {\n                    todolists.map((item) => {\n                        let tasksForTodolist = tasks[item.id];\n                        return (\n                            <Grid item>\n                                <Paper style={{ padding: \"20px\", backgroundColor: \" #263648\" }}>      {/*ЦВЕТ #23272e*/}\n                                    <Todolist\n                                        // id={item.id}\n                                        // title={item.title}\n                                        // filter={item.filter}\n                                        key={item.id}\n                                        todolist={item}\n                                        tasks={tasksForTodolist}\n                                        changeFilter={changeFilter}\n                                        removeTask={removeTask}\n                                        addTask={addTask}\n                                        changeTaskStatus={changeTaskStatus}\n                                        changeTaskTitle={changeTaskTitle}\n                                        removeTodolist={removeTodolist}\n                                        changeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        </>\n    )\n}\n","import React, { useState } from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStateType } from '../../state/store';\nimport { setAppErrorAC } from '../../state/app-reducer';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n\n    const error = useSelector<RootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null));\n    };\n\n    const isOpen = error !== null\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} >\n            <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import axios from 'axios';\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"d215560e-a06c-4471-95ae-fec7d89d460b\"\n    }\n}\n\nconst instans = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    ...settings\n})\n\n\nexport const loginAPI = {\n\n    // getTodolists() {\n    //     return instans.get<Array<TodolistAPIType>>(\"todo-lists/\");\n    // },\n    // addTodolist(title: string) {\n    //     return instans.post<ResponseType<{ item: TodolistAPIType }>>(\"todo-lists/\", { title: title });\n    // },\n    // removeTodolist(todolistId: string) {\n    //     return instans.delete<ResponseType>(`todo-lists/${todolistId}`);\n    // },\n    // changeTodolist(todolistId: string, newTitle: string) {\n    //     return instans.put<ResponseType>(`todo-lists/${todolistId}`, { title: newTitle })\n    // },\n\n    addLogin(payload: LoginAPIType) {\n        return instans.post<ResponseType<{ user?: number }>>(`auth/login`, { payload });// ??????? объект?\n    },\n    deleteLogin() {\n        return instans.delete<ResponseType<{}>>(`auth/login`);\n    },\n    getLogin() {\n        return instans.get<ResponseType<LoginAPIType>>(`auth/me`);\n    },\n\n\n}\n\n// types\nexport type LoginAPIType = {\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha?: string\n}\ntype ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n// type ResponseType<D = {}> = {\n    //     resultCode: number\n    //     messages: Array<string>\n    //     fieldsErrors: Array<string>\n//     data: D\n// }\n\n// export type AddLoginResponseType = {\n//     resultCode: number,\n//     messages: Array<string>,\n//     data: {\n//         userId: number \n//     }\n// }\n// export type DeleteLoginResponseType = {\n//     resultCode: number\n//     messages: Array<string>,\n//     data: {}\n// }\n// export type GetLoginResponseType = {\n//     resultCode: number,\n//     messages: Array<string>,\n//     data: {\n//         id: string,\n//         email: string,\n//         login: string\n//     }\n// }\n","import { loginAPI, LoginAPIType } from \"../api/login-api\"\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from \"./app-reducer\"\nimport { Dispatch } from 'redux';\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\";\n\nconst initialState: LoginAPIType = {\n    email: '',\n    password: '',\n    rememberMe: false,\n    captcha: ''\n}\n\nexport const loginReducer = (state: LoginAPIType = initialState, action: ActionsType): LoginAPIType => {\n    switch (action.type) {\n\n        // case '': {\n        //     return state\n        // }\n        // case '': {\n        //     return state\n        // }\n        // case '': {\n        //     return state\n        // }\n        // case '': {\n        //     return state\n        // }\n\n\n        default:\n            return state;\n    }\n\n}\n\n// actions\n// export const removeTaskAC = (taskId: string, todolistId: string) => ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\n// export const addTaskAC = (task: TaskAPIType) => ({ type: 'ADD-TASK', task } as const)\n// export const updateTaskAC = (taskId: string, model: ModelUpdateTaskType, todolistId: string) => ({ type: 'UPDATE-TASK', taskId, model, todolistId } as const)\n// export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({ type: 'SET-TASKS', tasks, todolistId } as const)\n\n// thunks\nexport const addLoginTC = (payload: LoginAPIType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    loginAPI.addLogin(payload)\n        // .then((res) => {\n        //     dispatch(addLoginAC())\n        //     dispatch(setAppStatusAC('succeeded'))\n        // })\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                // dispatch()\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n\n}\n// export const removeTasksTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     tasksAPI.removeTask(todolistId, taskId)\n//         .then((res) => {\n//             dispatch(removeTaskAC(taskId, todolistId))\n//             dispatch(setAppStatusAC('succeeded'))\n//         })\n// }\n\n\n\n// types\n\ntype ActionsType =\n    // | AddTodolistActionType\n    // | RemoveTodolistActionType\n    // | SetTodolistsActionType\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    // | ReturnType<typeof addTaskAC>\n    // | ReturnType<typeof removeTaskAC>\n    // | ReturnType<typeof setTasksAC>\n    // | ReturnType<typeof updateTaskAC>\n\n    ","import Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useFormik } from 'formik';\nimport { color } from '@mui/system';\nimport { useDispatch } from 'react-redux';\nimport { addLoginTC } from '../../../state/login-reducer';\n\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Email is required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'Password is required';\n            } else if ((values.password.length < 2)) {\n                errors.password = 'Invalid password';\n            }\n\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(addLoginTC(values))\n            formik.resetForm()\n        },\n    })\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit} >\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                                target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            // sx={{ input: { color: \"#61dafb\" } }}\n                            // sx={{ input: { background: \"#61dafb\" } }}\n\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                            onBlur={formik.handleBlur}\n                        />\n                        {formik.touched.email && formik.errors.email ? <div style={{ color: \"red\" }}>{formik.errors.email}</div> : null}\n                        <TextField\n                            // sx={{ input: { color: \"#61dafb\" } }}\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password ? <div style={{ color: \"red\" }}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                                checked={formik.values.rememberMe}\n                            />}\n                        />\n                        <Button\n                            type={'submit'}\n                            variant={'contained'}\n                            color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n\n//types\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}","import React from 'react';\nimport { AppBar, Button, Container, Grid, IconButton, Toolbar, Typography } from '@mui/material';\nimport './App.css';\nimport { Menu } from '@mui/icons-material';\nimport { TodolistsList } from '../components/features/TodolistsList/TodolistsList'\nimport { LinearProgress } from '@mui/material';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { useSelector } from 'react-redux';\nimport { RequestStatusType } from '../state/app-reducer';\nimport { RootStateType } from '../state/store';\nimport { Login } from '../components/features/Login/Login';\nimport { Route, Routes } from 'react-router-dom';\n\n\n\n\nexport function App() {\n\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        // size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                    // sx={{ mr: 2 }}\n                    >\n                        <Menu />\n                    </IconButton>\n                    <Typography\n                        variant=\"h6\"\n                    // component=\"div\"\n                    // sx={{ flexGrow: 1 }}\n                    >\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n                {status === 'loading' && <LinearProgress />}\n            </AppBar>\n            <Container fixed>\n                <Routes>\n                    <Route path=\"/login\" element={<Login />} />\n                    <Route path=\"/\" element={<TodolistsList />} />\n                    <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>} />\n                </Routes>\n            </Container>\n            <ErrorSnackbar />      {/*  ??????????????????????? цвет/рассположение*/}\n        </div>\n    );\n}\n\nexport default App;","import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { appReducer } from './app-reducer';\nimport { loginReducer } from './login-reducer';\n\nexport type RootStateType = ReturnType<typeof rootReducer>\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    login: loginReducer,\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\n\n//@ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider, createTheme } from '@mui/material';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#61dafb \"\n    },\n    secondary: {\n      main: \"#ffffff\"\n    },\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <ThemeProvider theme={theme} >\n          <App />\n        </ThemeProvider>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__7OfZP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__3Q8Uk\"};"],"sourceRoot":""}